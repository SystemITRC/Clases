import random
from datetime import datetime, timedelta

def error(msg):
    print("\033[4;31m"+msg+"\033[0m")

def success(msg):
    print("\033[4;32m"+msg+"\033[0m")

def result(msg):
    print("\033[1;34m"+msg+"\033[0m")

def Show_Menu(*Args):
    C = len(Args)
    print("==========================\n| TOTEM DE AUTO-SERVICIO |\n==========================")
    for i in range(C):
        print(f"{i+1}- {Args[i]}")

def FormatRut(rut):
    Clean = ''.join(filter(str.isalnum, rut))
    Verificador = Clean[-1]
    Digitos = Clean[:-1]
    Digitos_Invertidos = Digitos[::-1]
    Digitos_Formateados = ".".join([Digitos_Invertidos[i:i+3] for i in range(0, len(Digitos_Invertidos), 3)])[::-1]
    F_Rut = Digitos_Formateados+"-"+Verificador
    return F_Rut.upper()

def CheckRUT(rut):
    if len(rut) > 0:
        def Calcular_Verificador(digitos):
            Reversed_Digits = digitos[::-1]
            factor = 2
            suma = 0

            for digito in Reversed_Digits:
                suma += int(digito)*factor
                factor += 1
                if factor > 7:
                    factor = 2
            Digito_Verificador = 11-(suma%11)
            if Digito_Verificador == 11:
                Digito_Verificador = "0"
            elif Digito_Verificador == 10:
                Digito_Verificador = "K"
            return str(Digito_Verificador)
    
        Clean = ''.join(filter(str.isalnum, rut))
        D = Clean[:-1]
        V = Clean[-1]
        if (Clean[:-1].isdigit()) and (V.isdigit() or V.lower() == "k") and (len(D) >= 7 and len(D) < 10) and (Calcular_Verificador(D) == V):
            return True
        else:
            return False
    else:
        return False
    
def RandomInfo(edad):
    Sexos = ["Masculino","Femenino"]
    Estados = ["Casad","Solter","Viud"]
    Sexo = random.choice(Sexos)
    FNacimiento = (datetime.now() - timedelta(days=edad*365)).date().strftime("%d %B %Y")
    EstadoC = random.choice(Estados)
    if Sexo == "Masculino":
        EstadoC += "o"
    else:
        EstadoC += "a"
    return [Sexo,EstadoC,FNacimiento]

def PrintCNacimiento(RUT, NOMBRE, FECHA, SEXO, CIUDAD):
    result(f"\n\n====================================================")
    result(f"              CERTIFICADO DE NACIMIENTO             ")
    result(f"====================================================")
    result(f"Circunscripcion:\t\t{CIUDAD}")
    result(f"Nombre:\t\t\t\t{NOMBRE}")
    result(f"RUN:\t\t\t\t{RUT}")
    result(f"Fecha de nacimiento:\t\t{FECHA}")
    result(f"Sexo:\t\t\t\t{SEXO}")
    result(f"====================================================\n")

def PrintEConyugal(RUT, NOMBRE, ESCI):
    result(f"\n\n====================================================")
    result(f"             CERTIFICADO DE ESTADO CIVIL            ")
    result(f"====================================================")
    result(f"Nombre:\t\t\t\t{NOMBRE}")
    result(f"RUN:\t\t\t\t{RUT}")
    result(f"Estado civil:\t\t\t{ESCI}")
    result(f"====================================================\n")

#           Clave          0        1      2       3     4 [  0            1               2        ]
Datos = {"00.000.000-K":["Nombre","Edad","Pais","Ciudad",["Sexo_MoF","EstadoCivil","FechaNacimiento"]]} #plantilla
Finalizado = False
Version = "1.2.1"
while not Finalizado:
    Eleccion = ""
    print("\n")
    Show_Menu("Grabar","Buscar","Imprimir","Eliminar","Salir")
    Eleccion = input("Ingrese una opcion: ").lower()
    if Eleccion in ("1","grabar"):
        while True:
            RUT = input("Digite su rut: ")
            if CheckRUT(RUT):
                RUT = FormatRut(RUT)
                if RUT in Datos:
                    error(f"El rut {RUT} ya existe.")
                else:
                    success(f"El rut {RUT} es valido.")
                    break
            else:
                error(f"El rut {RUT} no es valido.")
        while True:
            Nombre = input("Digite su nombre: ").strip().title()
            CheckTemp = Nombre.replace(" ","")
            if len(CheckTemp) >= 8 and len(CheckTemp) <= 15 and CheckTemp.isalpha():
                Nombre = ' '.join(Nombre.split())
                success(f"El nombre {Nombre} es valido.")
                break
            else:
                error("El nombre debe tener de 8 a 15 letras.")
        while True:
            Edad = input("Digite su edad: ")
            if Edad.isdigit():
                Edad = int(Edad)
                if Edad > 0 and Edad < 115:
                    success(f"La edad {str(Edad)} es valida.")
                    break
                else:
                    error("La edad debe ser mayor a 0 y menor a 115.")
            else:
                error("La edad debe ser un numero entero.")
        while True:
            Ciudad = input("Digite su ciudad de nacimiento: ").strip().title()
            CheckTemp = Ciudad.replace(" ","")
            if len(CheckTemp) >= 4 and len(CheckTemp) <= 12 and CheckTemp.isalpha():
                Ciudad = ' '.join(Ciudad.split())
                success(f"La ciudad {Ciudad} es valida.")
                break
            else:
                error("La ciudad debe tener de 4 a 12 letras.")
        while True:
            Pais = input("Digite su pais de nacimiento: ").strip().title()
            CheckTemp = Pais.replace(" ","")
            if len(CheckTemp) >= 3 and len(CheckTemp) <= 20 and CheckTemp.isalpha():
                Pais = ' '.join(Pais.split())
                success(f"El pais {Pais} es valido.")
                break
            else:
                error("El pais debe tener de 3 a 20 letras.")
        Datos[RUT] = [Nombre,Edad,Pais,Ciudad,RandomInfo(Edad)]
        success(f"\nEl usuario {Nombre} ha sido agregado exitosamente con la siguiente informacion:\nRUT: {RUT}\nEDAD: {str(Edad)}\nPais: {Pais}\nCiudad: {Ciudad}")
    elif Eleccion in ("2", "buscar"):
        if len(Datos) > 1:
            RUT = input("Digite el rut que desea buscar: ")
            if CheckRUT(RUT):
                RUT = FormatRut(RUT)
                if RUT in Datos:
                    result(f"Datos del rut {RUT}:")
                    result(f"Nombre: {Datos[RUT][0]}\nEdad: {Datos[RUT][1]}\nPais: {Datos[RUT][2]}\nCiudad: {Datos[RUT][3]}")
                else:
                    error(f"El rut {RUT} no existe en la base de datos.")
            else:
                error(f"El rut {RUT} no es valido.")
        else:
            error("Aun no hay datos registrados para buscar.")
    elif Eleccion in ("3", "imprimir"):
        if len(Datos) > 1:
            while True:
                Eleccion = input("1- Certificado de nacimiento\n2- Estado conyugal\nElige una opcion: ").lower()
                if Eleccion in ("1", "certificado de nacimiento"):
                    RUT = input("Digite el rut que desea buscar: ")
                    if CheckRUT(RUT):
                        RUT = FormatRut(RUT)
                        if RUT in Datos:
                            PrintCNacimiento(RUT, Datos[RUT][0],Datos[RUT][4][2],Datos[RUT][4][0],Datos[RUT][3])
                            break
                        else:
                            error(f"El rut {RUT} no existe en la base de datos.")
                    else:
                        error(f"El rut {RUT} no es valido.")
                elif Eleccion in ("2", "estado conyugal"):
                    RUT = input("Digite el rut que desea buscar: ")
                    if CheckRUT(RUT):
                        RUT = FormatRut(RUT)
                        if RUT in Datos:
                            PrintEConyugal(RUT, Datos[RUT][0],Datos[RUT][4][1])
                            break
                        else:
                            error(f"El rut {RUT} no existe en la base de datos.")
                    else:
                        error(f"El rut {RUT} no es valido.")
                else:
                    error("Eleccion invalida.")
        else:
            error("Aun no hay datos registrados para imprimir.")
    elif Eleccion in ("4", "eliminar"):
        if len(Datos) > 1:
            RUT = input("Digite el rut que desea eliminar: ")
            if CheckRUT(RUT):
                RUT = FormatRut(RUT)
                if RUT in Datos:
                    del Datos[RUT]
                    success(f"El rut: {RUT} fue eliminado.")
                else:
                    error(f"El rut {RUT} no existe en la base de datos.")
            else:
                error(f"El rut {RUT} no es valido.")
        else:
            error("Aun no hay datos registrados para eliminar.")
    elif Eleccion in ("5", "salir"):
        Eleccion = input("Seguro que desea salir?\n1- Si\n2- No\nElija una opcion: ").lower()
        if Eleccion in ("1","si"):
            Finalizado = True
            success(f"Programa finalizado con exito.\nVersion: {Version}")
        elif Eleccion in ("2","no"):
            success("Salida cancelada.")
        else:
            error("Eleccion invalida.")
    else:
        error("Eleccion invalida.")
